{
  "minerType": {
    "name": "Verus-Miner",
    "description": "Verus Miner (Must install Python Locally)",
    "installScript": "import os, time, subprocess, tempfile, json, re\r\n\r\nADB = os.environ.get(\"adb_path\", \"adb\")\r\ndevices = os.environ.get(\"devices\", \"\").split()\r\n\r\nCPU_MAPPINGS_JSON = r'''{\r\n    \"cortex_a_legacy\": {\r\n        \"0x810\":{\"name\":\"810\",\"full_name\":\"ARM810\"},\r\n        \"0x920\":{\"name\":\"920\",\"full_name\":\"ARM920\"},\r\n        \"0x922\":{\"name\":\"922\",\"full_name\":\"ARM922\"},\r\n        \"0x926\":{\"name\":\"926\",\"full_name\":\"ARM926\"},\r\n        \"0x940\":{\"name\":\"940\",\"full_name\":\"ARM940\"},\r\n        \"0x946\":{\"name\":\"946\",\"full_name\":\"ARM946\"},\r\n        \"0x966\":{\"name\":\"966\",\"full_name\":\"ARM966\"},\r\n        \"0xa20\":{\"name\":\"1020\",\"full_name\":\"ARM1020\"},\r\n        \"0xa22\":{\"name\":\"1022\",\"full_name\":\"ARM1022\"},\r\n        \"0xa26\":{\"name\":\"1026\",\"full_name\":\"ARM1026\"},\r\n        \"0xb02\":{\"name\":\"11mp\",\"full_name\":\"ARM11 MPCore\"},\r\n        \"0xb36\":{\"name\":\"1136\",\"full_name\":\"ARM1136\"},\r\n        \"0xb56\":{\"name\":\"1156\",\"full_name\":\"ARM1156\"},\r\n        \"0xb76\":{\"name\":\"1176\",\"full_name\":\"ARM1176\"},\r\n        \"0xc05\":{\"name\":\"a5\",\"full_name\":\"Cortex-A5\"},\r\n        \"0xc07\":{\"name\":\"a7\",\"full_name\":\"Cortex-A7\"},\r\n        \"0xc08\":{\"name\":\"a8\",\"full_name\":\"Cortex-A8\"},\r\n        \"0xc09\":{\"name\":\"a9\",\"full_name\":\"Cortex-A9\"},\r\n        \"0xc0d\":{\"name\":\"a17\",\"full_name\":\"Cortex-A17 (Originally A12)\"},\r\n        \"0xc0f\":{\"name\":\"a15\",\"full_name\":\"Cortex-A15\"},\r\n        \"0xc0e\":{\"name\":\"a17\",\"full_name\":\"Cortex-A17\"}\r\n    },\r\n    \"cortex_a_modern\": {\r\n        \"0xd01\":{\"name\":\"a32\",\"full_name\":\"Cortex-A32\"},\r\n        \"0xd02\":{\"name\":\"a34\",\"full_name\":\"Cortex-A34\"},\r\n        \"0xd03\":{\"name\":\"a53\",\"full_name\":\"Cortex-A53\"},\r\n        \"0xd04\":{\"name\":\"a35\",\"full_name\":\"Cortex-A35\"},\r\n        \"0xd05\":{\"name\":\"a55\",\"full_name\":\"Cortex-A55\"},\r\n        \"0xd06\":{\"name\":\"a65\",\"full_name\":\"Cortex-A65\"},\r\n        \"0xd07\":{\"name\":\"a57\",\"full_name\":\"Cortex-A57\"},\r\n        \"0xd08\":{\"name\":\"a72\",\"full_name\":\"Cortex-A72\"},\r\n        \"0xd09\":{\"name\":\"a73\",\"full_name\":\"Cortex-A73\"},\r\n        \"0xd0a\":{\"name\":\"a75\",\"full_name\":\"Cortex-A75\"},\r\n        \"0xd0b\":{\"name\":\"a76\",\"full_name\":\"Cortex-A76\"},\r\n        \"0xd0d\":{\"name\":\"a77\",\"full_name\":\"Cortex-A77\"},\r\n        \"0xd0e\":{\"name\":\"a76ae\",\"full_name\":\"Cortex-A76AE\"},\r\n        \"0xd41\":{\"name\":\"a78\",\"full_name\":\"Cortex-A78\"},\r\n        \"0xd42\":{\"name\":\"a78ae\",\"full_name\":\"Cortex-A78AE\"},\r\n        \"0xd43\":{\"name\":\"a65ae\",\"full_name\":\"Cortex-A65AE\"},\r\n        \"0xd44\":{\"name\":\"x1\",\"full_name\":\"Cortex-X1\"},\r\n        \"0xd46\":{\"name\":\"a510\",\"full_name\":\"Cortex-A510\"},\r\n        \"0xd47\":{\"name\":\"a710\",\"full_name\":\"Cortex-A710\"},\r\n        \"0xd48\":{\"name\":\"x2\",\"full_name\":\"Cortex-X2\"},\r\n        \"0xd4b\":{\"name\":\"a78c\",\"full_name\":\"Cortex-A78C\"},\r\n        \"0xd4c\":{\"name\":\"x1c\",\"full_name\":\"Cortex-X1C\"},\r\n        \"0xd4d\":{\"name\":\"a715\",\"full_name\":\"Cortex-A715\"},\r\n        \"0xd4e\":{\"name\":\"x3\",\"full_name\":\"Cortex-X3\"},\r\n        \"0xd80\":{\"name\":\"a520\",\"full_name\":\"Cortex-A520\"},\r\n        \"0xd81\":{\"name\":\"a720\",\"full_name\":\"Cortex-A720\"},\r\n        \"0xd82\":{\"name\":\"x4\",\"full_name\":\"Cortex-X4\"},\r\n        \"0xd85\":{\"name\":\"x925\",\"full_name\":\"Cortex-X925\"},\r\n        \"0xd87\":{\"name\":\"a725\",\"full_name\":\"Cortex-A725\"}\r\n    },\r\n    \"neoverse\": {\r\n        \"0xd0c\":{\"name\":\"n1\",\"full_name\":\"Neoverse-N1\"},\r\n        \"0xd40\":{\"name\":\"v1\",\"full_name\":\"Neoverse-V1\"},\r\n        \"0xd49\":{\"name\":\"n2\",\"full_name\":\"Neoverse-N2\"},\r\n        \"0xd4a\":{\"name\":\"e1\",\"full_name\":\"Neoverse-E1\"},\r\n        \"0xd4f\":{\"name\":\"v2\",\"full_name\":\"Neoverse-V2\"},\r\n        \"0xd84\":{\"name\":\"v3\",\"full_name\":\"Neoverse-V3\"},\r\n        \"0xd8e\":{\"name\":\"n3\",\"full_name\":\"Neoverse-N3\"}\r\n    },\r\n    \"qualcomm\": {\r\n        \"0x00f\":{\"name\":\"scorpion\",\"full_name\":\"Scorpion\"},\r\n        \"0x02d\":{\"name\":\"scorpion\",\"full_name\":\"Scorpion\"},\r\n        \"0x04d\":{\"name\":\"krait\",\"full_name\":\"Krait\"},\r\n        \"0x06f\":{\"name\":\"krait\",\"full_name\":\"Krait\"},\r\n        \"0x201\":{\"name\":\"kryo\",\"full_name\":\"Kryo\"},\r\n        \"0x205\":{\"name\":\"kryo\",\"full_name\":\"Kryo\"},\r\n        \"0x211\":{\"name\":\"kryo\",\"full_name\":\"Kryo\"},\r\n        \"0x800\":{\"name\":\"kryo-falkor\",\"full_name\":\"Falkor-V1/Kryo\"},\r\n        \"0x801\":{\"name\":\"a53\",\"full_name\":\"Kryo v2 (Based on A53)\"},\r\n        \"0x802\":{\"name\":\"kryo-3xx-gold\",\"full_name\":\"Kryo 3xx Series (Gold)\"},\r\n        \"0x803\":{\"name\":\"kryo-3xx-silver\",\"full_name\":\"Kryo 3xx Series (Silver)\"},\r\n        \"0x804\":{\"name\":\"kryo-4xx-gold\",\"full_name\":\"Kryo 4xx Series (Gold)\"},\r\n        \"0x805\":{\"name\":\"kryo-4xx-silver\",\"full_name\":\"Kryo 4xx Series (Silver)\"},\r\n        \"0xc00\":{\"name\":\"falkor\",\"full_name\":\"Falkor\"},\r\n        \"0xc01\":{\"name\":\"saphira\",\"full_name\":\"Saphira\"}\r\n    },\r\n    \"hisilicon\": {\r\n        \"0xd01\":{\"name\":\"taishan-v110\",\"full_name\":\"HiSilicon Taishan V110\"},\r\n        \"0xd02\":{\"name\":\"taishan-v120\",\"full_name\":\"HiSilicon Taishan V120\"},\r\n        \"0xd40\":{\"name\":\"a76\",\"full_name\":\"HiSilicon Cortex-A76\"},\r\n        \"0xd41\":{\"name\":\"a77\",\"full_name\":\"HiSilicon Cortex-A77\"}\r\n    },\r\n    \"apple\": {\r\n        \"0x000\":{\"name\":\"swift\",\"full_name\":\"Apple Swift\"},\r\n        \"0x001\":{\"name\":\"cyclone\",\"full_name\":\"Apple Cyclone\"},\r\n        \"0x002\":{\"name\":\"typhoon\",\"full_name\":\"Apple Typhoon\"},\r\n        \"0x003\":{\"name\":\"typhoon-capri\",\"full_name\":\"Apple Typhoon/Capri\"},\r\n        \"0x004\":{\"name\":\"twister\",\"full_name\":\"Apple Twister\"},\r\n        \"0x005\":{\"name\":\"twister-elba-malta\",\"full_name\":\"Apple Twister/Elba/Malta\"},\r\n        \"0x006\":{\"name\":\"hurricane\",\"full_name\":\"Apple Hurricane\"},\r\n        \"0x007\":{\"name\":\"hurricane-myst\",\"full_name\":\"Apple Hurricane/Myst\"},\r\n        \"0x008\":{\"name\":\"monsoon\",\"full_name\":\"Apple Monsoon\"},\r\n        \"0x009\":{\"name\":\"mistral\",\"full_name\":\"Apple Mistral\"},\r\n        \"0x00b\":{\"name\":\"vortex\",\"full_name\":\"Apple Vortex\"},\r\n        \"0x00c\":{\"name\":\"tempest\",\"full_name\":\"Apple Tempest\"},\r\n        \"0x00f\":{\"name\":\"tempest-m9\",\"full_name\":\"Apple Tempest-M9\"},\r\n        \"0x010\":{\"name\":\"vortex-aruba\",\"full_name\":\"Apple Vortex/Aruba\"},\r\n        \"0x011\":{\"name\":\"tempest-aruba\",\"full_name\":\"Apple Tempest/Aruba\"},\r\n        \"0x012\":{\"name\":\"lightning\",\"full_name\":\"Apple Lightning\"},\r\n        \"0x013\":{\"name\":\"thunder\",\"full_name\":\"Apple Thunder\"},\r\n        \"0x020\":{\"name\":\"icestorm-a14\",\"full_name\":\"Apple Icestorm-A14\"},\r\n        \"0x021\":{\"name\":\"firestorm-a14\",\"full_name\":\"Apple Firestorm-A14\"},\r\n        \"0x022\":{\"name\":\"icestorm-m1\",\"full_name\":\"Apple Icestorm-M1\"},\r\n        \"0x023\":{\"name\":\"firestorm-m1\",\"full_name\":\"Apple Firestorm-M1\"},\r\n        \"0x024\":{\"name\":\"icestorm-m1-pro\",\"full_name\":\"Apple Icestorm-M1-Pro\"},\r\n        \"0x025\":{\"name\":\"firestorm-m1-pro\",\"full_name\":\"Apple Firestorm-M1-Pro\"},\r\n        \"0x026\":{\"name\":\"thunder-m10\",\"full_name\":\"Apple Thunder-M10\"},\r\n        \"0x028\":{\"name\":\"icestorm-m1-max\",\"full_name\":\"Apple Icestorm-M1-Max\"},\r\n        \"0x029\":{\"name\":\"firestorm-m1-max\",\"full_name\":\"Apple Firestorm-M1-Max\"},\r\n        \"0x030\":{\"name\":\"blizzard-a15\",\"full_name\":\"Apple Blizzard-A15\"},\r\n        \"0x031\":{\"name\":\"avalanche-a15\",\"full_name\":\"Apple Avalanche-A15\"},\r\n        \"0x032\":{\"name\":\"blizzard-m2\",\"full_name\":\"Apple Blizzard-M2\"},\r\n        \"0x033\":{\"name\":\"avalanche-m2\",\"full_name\":\"Apple Avalanche-M2\"},\r\n        \"0x034\":{\"name\":\"blizzard-m2-pro\",\"full_name\":\"Apple Blizzard-M2-Pro\"},\r\n        \"0x035\":{\"name\":\"avalanche-m2-pro\",\"full_name\":\"Apple Avalanche-M2-Pro\"},\r\n        \"0x036\":{\"name\":\"sawtooth-a16\",\"full_name\":\"Apple Sawtooth-A16\"},\r\n        \"0x037\":{\"name\":\"everest-a16\",\"full_name\":\"Apple Everest-A16\"},\r\n        \"0x038\":{\"name\":\"blizzard-m2-max\",\"full_name\":\"Apple Blizzard-M2-Max\"},\r\n        \"0x039\":{\"name\":\"avalanche-m2-max\",\"full_name\":\"Apple Avalanche-M2-Max\"}\r\n    }\r\n}'''\r\n\r\n# Build bash \"declare -A MAP=( ... )\" lines from JSON\r\ndef build_bash_map():\r\n    data = json.loads(CPU_MAPPINGS_JSON)\r\n    kv = []\r\n    for _, items in data.items():\r\n        for hexpart, info in items.items():\r\n            # normalize hex to lowercase with 0x prefix\r\n            try:\r\n                key = \"0x%X\" % int(hexpart, 16)\r\n            except Exception:\r\n                key = hexpart\r\n            kv.append(f'[\"{key.lower()}\"]=\"{info[\"name\"]}\"')\r\n    return \" \".join(kv)\r\n\r\nBASH_MAP_ENTRIES = build_bash_map()\r\n\r\ninstall_script_content = rf'''#!/data/data/com.termux/files/usr/bin/bash\r\nset -e\r\nexport DEBIAN_FRONTEND=noninteractive\r\nexport TERMUX_PKG_NO_PROMPT=1\r\n\r\necho \"[*] Updating Termux...\"\r\nyes '' | pkg upgrade -y || true\r\npkg update -y || true\r\npkg upgrade -y || true\r\n\r\necho \"[*] Installing deps...\"\r\npkg install -y wget curl libjansson || true\r\n\r\necho \"[*] Detecting CPU -> branch...\"\r\ndeclare -A MAP=({BASH_MAP_ENTRIES})\r\n\r\n# collect unique CPU parts\r\nparts=$(grep -E \"CPU part\" /proc/cpuinfo | awk -F':' '{{gsub(/ /, \"\", $2); print tolower($2)}}' | sort -u)\r\ndetected_names=()\r\n\r\necho \"[*] Found CPU parts: $parts\"\r\n\r\nfor p in $parts; do\r\n  name=${{MAP[\"$p\"]}}\r\n  if [ -n \"$name\" ]; then\r\n    detected_names+=(\"$name\")\r\n    echo \"[*] Part $p -> $name\"\r\n  else\r\n    echo \"[*] Part $p -> unknown\"\r\n  fi\r\ndone\r\n\r\nbranch=\"generic\"\r\n\r\nbranch_exists() {{\r\n  curl -sIf \"https://raw.githubusercontent.com/cellhasher/pre-compiled/$1/ccminer\" >/dev/null 2>&1\r\n}}\r\n\r\n# Print detected names for debugging\r\necho \"[*] Detected CPU names: ${{detected_names[@]}}\"\r\n\r\n# Check if we have multiple CPU parts (potential combo)\r\nif [ \"${{#detected_names[@]}}\" -gt 1 ]; then\r\n  echo \"[*] Multiple CPU parts detected, checking for combo branches...\"\r\n  \r\n  # Try all possible 2-part combinations\r\n  for ((i=0; i<${{#detected_names[@]}}; i++)); do\r\n    for ((j=i+1; j<${{#detected_names[@]}}; j++)); do\r\n      name1=\"${{detected_names[$i]}}\"\r\n      name2=\"${{detected_names[$j]}}\"\r\n      \r\n      # Try both orderings of the combo\r\n      combo1=\"${{name1}}-${{name2}}\"\r\n      combo2=\"${{name2}}-${{name1}}\"\r\n      \r\n      echo \"[*] Checking combo: $combo1\"\r\n      if branch_exists \"$combo1\"; then\r\n        branch=\"$combo1\"\r\n        echo \"[*] Found combo branch: $combo1\"\r\n        break 2\r\n      fi\r\n      \r\n      echo \"[*] Checking combo: $combo2\"\r\n      if branch_exists \"$combo2\"; then\r\n        branch=\"$combo2\"\r\n        echo \"[*] Found combo branch: $combo2\"\r\n        break 2\r\n      fi\r\n    done\r\n  done\r\n  \r\n  # Also try specific known combo patterns if branch still generic\r\n  if [ \"$branch\" = \"generic\" ]; then\r\n    echo \"[*] Trying known combo patterns...\"\r\n    \r\n    combo_check() {{\r\n      a=\"$1\"; b=\"$2\"; comb=\"$3\"\r\n      ok_a=0; ok_b=0\r\n      for n in \"${{detected_names[@]}}\"; do\r\n        [ \"$n\" = \"$a\" ] && ok_a=1\r\n        [ \"$n\" = \"$b\" ] && ok_b=1\r\n      done\r\n      if [ $ok_a -eq 1 ] && [ $ok_b -eq 1 ]; then\r\n        echo \"[*] Device has both $a and $b, checking $comb branch...\"\r\n        if branch_exists \"$comb\"; then\r\n          branch=\"$comb\"\r\n          echo \"[*] Found known combo branch: $comb\"\r\n          return 0\r\n        fi\r\n      fi\r\n      return 1\r\n    }}\r\n    \r\n    combo_check a76 a55 a76-a55 || \\\r\n    combo_check a75 a55 a75-a55 || \\\r\n    combo_check a77 a55 a77-a55 || \\\r\n    combo_check a78 a55 a78-a55 || \\\r\n    combo_check a73 a53 a73-a53 || \\\r\n    combo_check a57 a53 a57-a53 || \\\r\n    combo_check a72 a53 a72-a53 || \\\r\n    combo_check a53 a55 a53-a55 || \\\r\n    combo_check a710 a510 a710-a510 || \\\r\n    combo_check a715 a510 a715-a510 || \\\r\n    combo_check a720 a520 a720-a520 || \\\r\n    combo_check x1 a78 x1-a78 || \\\r\n    combo_check x2 a710 x2-a710 || \\\r\n    combo_check x3 a715 x3-a715 || \\\r\n    combo_check x4 a720 x4-a720 || true\r\n  fi\r\nfi\r\n\r\n# If still generic and we have detected names, try single branches\r\nif [ \"$branch\" = \"generic\" ] && [ \"${{#detected_names[@]}}\" -gt 0 ]; then\r\n  echo \"[*] No combo branch found, trying single CPU branches...\"\r\n  \r\n  # Try each detected name as a branch\r\n  for name in \"${{detected_names[@]}}\"; do\r\n    echo \"[*] Checking single branch: $name\"\r\n    if branch_exists \"$name\"; then\r\n      branch=\"$name\"\r\n      echo \"[*] Found single branch: $name\"\r\n      break\r\n    fi\r\n  done\r\nfi\r\n\r\n# Final fallback: pick numerically newest known part\r\nif [ \"$branch\" = \"generic\" ] && [ -n \"$parts\" ]; then\r\n  echo \"[*] Still generic, trying newest CPU part as fallback...\"\r\n  newest=$(echo \"$parts\" | sed 's/^0x//' | awk '{{print \"0x\"$0}}' | sort -n | tail -n1)\r\n  nn=${{MAP[\"$newest\"]}}\r\n  if [ -n \"$nn\" ] && branch_exists \"$nn\"; then\r\n    branch=\"$nn\"\r\n    echo \"[*] Using newest CPU part branch: $nn\"\r\n  fi\r\nfi\r\n\r\necho \"[*] Final branch selection: $branch\"\r\n\r\necho \"[*] Preparing ~/ccminer...\"\r\nmkdir -p ~/ccminer\r\ncd ~/ccminer\r\n\r\necho \"[*] Downloading ccminer from branch: $branch...\"\r\nwget -q \"https://raw.githubusercontent.com/cellhasher/pre-compiled/$branch/ccminer\" -O ccminer\r\nchmod +x ccminer\r\n\r\necho \"[*] Downloading start.sh from branch: $branch...\"\r\nwget -q \"https://raw.githubusercontent.com/cellhasher/pre-compiled/$branch/start.sh\" -O start.sh\r\nchmod +x start.sh\r\n\r\necho \"[OK] Verus install complete with branch: $branch\"\r\n'''\r\n\r\ndef install_on_device(device_id, script_path):\r\n    try:\r\n        print(f\"[{device_id}] Starting install...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell am force-stop com.termux\", shell=True)\r\n        time.sleep(1)\r\n\r\n        remote = \"/data/local/tmp/verus_install.sh\"\r\n        print(f\"[{device_id}] Pushing install script...\")\r\n        subprocess.run(f'{ADB} -s {device_id} push \"{script_path}\" \"{remote}\"', shell=True, check=True)\r\n        subprocess.run(f\"{ADB} -s {device_id} shell chmod 755 {remote}\", shell=True, check=True)\r\n\r\n        print(f\"[{device_id}] Launching Termux + running script...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell am start -n com.termux/com.termux.app.TermuxActivity\", shell=True)\r\n        time.sleep(3)\r\n        # spaces as %s for input text\r\n        typed = \"bash%s/data/local/tmp/verus_install.sh\"\r\n        subprocess.run(f'{ADB} -s {device_id} shell input text \"{typed}\"', shell=True)\r\n        time.sleep(1)\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input keyevent 66\", shell=True)\r\n        print(f\"[{device_id}] Install kicked off.\")\r\n        return f\"[{device_id}] OK\"\r\n    except Exception as e:\r\n        return f\"[{device_id}] ERROR: {e}\"\r\n\r\n# Write the script with UTF-8 + LF to avoid cp1252/CRLF issues\r\nwith tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', newline='\\n', delete=False, suffix='.sh') as f:\r\n    f.write(install_script_content)\r\n    local_script_path = f.name\r\n\r\nif not devices:\r\n    print(\"No devices in $devices\")\r\nelse:\r\n    from concurrent.futures import ThreadPoolExecutor, as_completed\r\n    with ThreadPoolExecutor(max_workers=max(1, len(devices))) as ex:\r\n        fut = {ex.submit(install_on_device, d, local_script_path): d for d in devices}\r\n        for r in as_completed(fut):\r\n            print(r.result())\r\n\r\nos.unlink(local_script_path)\r\nprint(\"Install commands sent to all devices.\")",
    "runScript": "# verus_run.py\r\n# Refresh config.json from flightsheet env and start miner (overwrites every run).\r\n\r\nimport os, time, json, tempfile, subprocess, concurrent.futures\r\n\r\nADB           = os.environ.get(\"adb_path\", \"adb\")\r\ndevices       = os.environ.get(\"devices\", \"\").split()\r\nwallet        = os.environ.get(\"wallet_address\", \"\")\r\npool_url      = os.environ.get(\"pool_url\", \"\")\r\nthreads       = int(os.environ.get(\"threads\", \"4\"))\r\npool_password = os.environ.get(\"pool_password\", \"x\")\r\n\r\ndef adb(cmd):\r\n    return subprocess.run(cmd, shell=True, capture_output=True, text=True)\r\n\r\ndef type_cmd(device_id: str, cmd: str, enter=True, pause=0.35):\r\n    esc = cmd.replace(\" \", \"%s\")\r\n    adb(f'{ADB} -s {device_id} shell input text \"{esc}\"')\r\n    if enter:\r\n        time.sleep(0.25)\r\n        adb(f\"{ADB} -s {device_id} shell input keyevent 66\")\r\n    time.sleep(pause)\r\n\r\ndef push_text_tmp(device_id: str, contents: str, remote_tmp: str):\r\n    # ensure LF and trailing newline\r\n    contents = contents.replace(\"\\r\\n\", \"\\n\")\r\n    if not contents.endswith(\"\\n\"):\r\n        contents += \"\\n\"\r\n    with tempfile.NamedTemporaryFile(\"w\", encoding=\"utf-8\", delete=False) as f:\r\n        f.write(contents)\r\n        local = f.name\r\n    adb(f'{ADB} -s {device_id} push \"{local}\" \"{remote_tmp}\"')\r\n\r\ndef run_on(device_id: str):\r\n    # Build flat config schema ccminer understands\r\n    config = {\r\n        \"algo\": \"verus\",\r\n        \"url\":  pool_url,\r\n        \"user\": wallet,\r\n        \"pass\": pool_password,\r\n        \"threads\": threads,\r\n        \"cpu-priority\": 1,\r\n        \"retry-pause\": 10,\r\n        \"api-allow\": \"192.168.0.0/16\",\r\n        \"api-bind\":  \"0.0.0.0:4068\",\r\n    }\r\n\r\n    # 1) push config to /data/local/tmp\r\n    push_text_tmp(device_id, json.dumps(config, ensure_ascii=False, indent=2), \"/data/local/tmp/ccm_config.json\")\r\n\r\n    # 2) restart Termux for a clean session and give it a moment\r\n    adb(f\"{ADB} -s {device_id} shell am force-stop com.termux\")\r\n    time.sleep(1.5)\r\n    adb(f\"{ADB} -s {device_id} shell am start -n com.termux/com.termux.app.TermuxActivity\")\r\n    time.sleep(3.5)\r\n\r\n    # 3) copy config into app dir and start\r\n    type_cmd(device_id, \"mkdir -p ~/ccminer\")\r\n    type_cmd(device_id, \"cp /data/local/tmp/ccm_config.json ~/ccminer/config.json\")\r\n    type_cmd(device_id, \"cd ~/ccminer\")\r\n    type_cmd(device_id, \"./start.sh\")\r\n\r\n    # keep awake (optional)\r\n    adb(f\"{ADB} -s {device_id} shell svc power stayon true\")\r\n    print(f\"[{device_id}] Miner started.\")\r\n\r\ndef main():\r\n    if not devices:\r\n        print(\"No devices in $devices\")\r\n        return\r\n    with concurrent.futures.ThreadPoolExecutor(max_workers=max(1, len(devices))) as ex:\r\n        futs = [ex.submit(run_on, d) for d in devices]\r\n        for f in concurrent.futures.as_completed(futs):\r\n            f.result()\r\n\r\nif __name__ == \"__main__\":\r\n    main()",
    "stopScript": "# verus_stop.py\r\n# Stop miner by killing Termux (and try to kill ccminer if it escaped).\r\n\r\nimport os, subprocess, concurrent.futures\r\n\r\nADB     = os.environ.get(\"adb_path\", \"adb\")\r\ndevices = os.environ.get(\"devices\", \"\").split()\r\n\r\ndef adb(cmd): \r\n    return subprocess.run(cmd, shell=True, capture_output=True, text=True)\r\n\r\ndef stop_on(device_id: str):\r\n    # Try to kill ccminer if it happens to be running outside the app shell\r\n    adb(f'{ADB} -s {device_id} shell \"pkill -f ccminer 2>/dev/null || true\"')\r\n    # Force-stop Termux (kills the foreground miner in the session)\r\n    adb(f\"{ADB} -s {device_id} shell am force-stop com.termux\")\r\n    print(f\"[{device_id}] Stopped.\")\r\n\r\ndef main():\r\n    if not devices:\r\n        print(\"No devices in $devices\")\r\n        return\r\n    with concurrent.futures.ThreadPoolExecutor(max_workers=max(1, len(devices))) as ex:\r\n        futs = [ex.submit(stop_on, d) for d in devices]\r\n        for f in concurrent.futures.as_completed(futs):\r\n            f.result()\r\n\r\nif __name__ == \"__main__\":\r\n    main()",
    "installTermux": true,
    "installScriptLanguage": "Python",
    "runScriptLanguage": "Python",
    "stopScriptLanguage": "Python",
    "id": "fc184bc3-d4f1-49d8-8b14-c777f1b33ba6"
  },
  "timestamp": "2025-09-08T21:15:03.752Z",
  "version": "1.0.0"
}