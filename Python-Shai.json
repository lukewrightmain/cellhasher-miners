{
  "minerType": {
    "name": "Shai",
    "description": "test",
    "installScript": "import os, time, subprocess, tempfile\r\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\r\n\r\nADB = os.environ.get(\"adb_path\", \"adb\")\r\ndevices = os.environ.get(\"devices\", \"\").split()\r\n\r\ninstall_script_content = r'''#!/data/data/com.termux/files/usr/bin/bash\r\nset -e\r\n\r\necho \"[*] Cloning shaipot-optimized repository...\"\r\nif [ -d \"~/shaipot-optimized\" ]; then\r\n    echo \"[*] Repository exists, pulling latest changes...\"\r\n    cd ~/shaipot-optimized && git pull || true\r\nelse\r\n    git clone https://github.com/lukewrightmain/shaipot-optimized ~/shaipot-optimized\r\nfi\r\n\r\necho \"[OK] ShaiPot installation complete!\"\r\n'''\r\n\r\ndef install_on_device(device_id, script_path):\r\n    try:\r\n        print(f\"[{device_id}] Starting installation...\")\r\n\r\n        subprocess.run(f\"{ADB} -s {device_id} shell am force-stop com.termux\", shell=True)\r\n        time.sleep(1)\r\n\r\n        device_temp_path = \"/data/local/tmp/shai_install.sh\"\r\n        print(f\"[{device_id}] Pushing install script...\")\r\n        subprocess.run(f'{ADB} -s {device_id} push \"{script_path}\" \"{device_temp_path}\"', shell=True, check=True)\r\n\r\n        print(f\"[{device_id}] chmod +x ...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell chmod 755 {device_temp_path}\", shell=True, check=True)\r\n\r\n        print(f\"[{device_id}] Launching Termux and waiting for initialization...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell am start -n com.termux/com.termux.app.TermuxActivity\", shell=True)\r\n        time.sleep(10)  # Wait 10 seconds for Termux to fully load\r\n\r\n        # Use %s to send a space with \"adb shell input text\"\r\n        adb_typed_cmd = \"bash%s/data/local/tmp/shai_install.sh\"\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input text \\\"{adb_typed_cmd}\\\"\", shell=True)\r\n        time.sleep(1)\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input keyevent 66\", shell=True)\r\n\r\n        print(f\"[{device_id}] Install process started successfully!\")\r\n        return f\"[{device_id}] Success\"\r\n    except Exception as e:\r\n        print(f\"[{device_id}] Error: {e}\")\r\n        return f\"[{device_id}] Error: {e}\"\r\n\r\n# Write the script with UTF-8 + LF to avoid cp1252/CRLF issues\r\nwith tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', newline='\\n', delete=False, suffix='.sh') as f:\r\n    f.write(install_script_content)\r\n    local_script_path = f.name\r\n\r\nif not devices:\r\n    print(\"No devices in $devices\")\r\nelse:\r\n    print(f\"Saved installation script to {local_script_path}\")\r\n    print(\"=== Starting ShaiPot Installation (Parallel) ===\")\r\n\r\n    max_workers = max(1, len(devices))\r\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:\r\n        future_to_device = {executor.submit(install_on_device, d, local_script_path): d for d in devices}\r\n        for future in as_completed(future_to_device):\r\n            device_id = future_to_device[future]\r\n            try:\r\n                result = future.result()\r\n                print(result)\r\n            except Exception as exc:\r\n                print(f\"[{device_id}] Generated an exception: {exc}\")\r\n\r\n    os.unlink(local_script_path)\r\n    print(\"Installation commands sent to all devices. Build process may take several minutes.\")",
    "runScript": "import os, time, subprocess\r\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\r\n\r\nADB = os.environ.get(\"adb_path\", \"adb\")\r\ndevices = os.environ.get(\"devices\", \"\").split()\r\nwallet_address = os.environ.get(\"wallet_address\", \"\")\r\npool_url = os.environ.get(\"pool_url\", \"\")\r\nthreads = os.environ.get(\"threads\", \"8\")\r\nvdftime1 = os.environ.get(\"vdftime1\", \"\")\r\nvdftime2 = os.environ.get(\"vdftime2\", \"\")\r\n\r\ndef run_mining_on_device(device_id):\r\n    \"\"\"Start ShaiPot mining on a single device\"\"\"\r\n    try:\r\n        print(f\"[{device_id}] Starting ShaiPot mining...\")\r\n\r\n        # Construct the mining command\r\n        mining_cmd = f\"./target/release/shaipot -a {wallet_address} -p {pool_url} -t {threads}\"\r\n\r\n        # Add optional vdftime parameters if provided\r\n        if vdftime1:\r\n            mining_cmd += f\" --vdftime1 {vdftime1}\"\r\n        if vdftime2:\r\n            mining_cmd += f\" --vdftime2 {vdftime2}\"\r\n\r\n        print(f\"[{device_id}] Force stopping Termux...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell am force-stop com.termux\", shell=True)\r\n        time.sleep(2)\r\n\r\n        print(f\"[{device_id}] Launching Termux...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell am start -n com.termux/com.termux.app.TermuxActivity\", shell=True)\r\n        time.sleep(8)  # Wait 8 seconds for Termux to fully initialize\r\n\r\n        print(f\"[{device_id}] Navigating to shaipot-optimized directory...\")\r\n        # Type 'cd shaipot-optimized' command\r\n        cd_cmd = \"cd%sshaipot-optimized\"\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input text \\\"{cd_cmd}\\\"\", shell=True)\r\n        time.sleep(1)\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input keyevent 66\", shell=True)\r\n        time.sleep(2)\r\n\r\n        print(f\"[{device_id}] Starting mining with command: {mining_cmd}\")\r\n        # Escape spaces for ADB input text\r\n        escaped_cmd = mining_cmd.replace(\" \", \"%s\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input text \\\"{escaped_cmd}\\\"\", shell=True)\r\n        time.sleep(1)\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input keyevent 66\", shell=True)\r\n\r\n        print(f\"[{device_id}] Keeping device screen on...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell svc power stayon true\", shell=True)\r\n\r\n        print(f\"[{device_id}] ShaiPot mining initiated successfully!\")\r\n        return f\"[{device_id}] Mining started\"\r\n    except Exception as e:\r\n        print(f\"[{device_id}] Error starting mining: {e}\")\r\n        return f\"[{device_id}] Error: {e}\"\r\n\r\nprint(\"=== Starting ShaiPot Mining (Parallel) ===\")\r\n\r\nif not devices:\r\n    print(\"No devices specified in $devices environment variable\")\r\nelif not wallet_address:\r\n    print(\"No wallet address specified in $wallet_address environment variable\")\r\nelif not pool_url:\r\n    print(\"No pool URL specified in $pool_url environment variable\")\r\nelse:\r\n    # Process all devices in parallel\r\n    with ThreadPoolExecutor(max_workers=len(devices)) as executor:\r\n        future_to_device = {executor.submit(run_mining_on_device, device_id): device_id for device_id in devices}\r\n\r\n        for future in as_completed(future_to_device):\r\n            device_id = future_to_device[future]\r\n            try:\r\n                result = future.result()\r\n                print(result)\r\n            except Exception as exc:\r\n                print(f\"[{device_id}] Generated an exception: {exc}\")\r\n\r\n    print(\"ShaiPot mining started on all devices. Check the devices to see the progress.\")\r\n",
    "stopScript": "import os, time, subprocess\r\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\r\n\r\nADB = os.environ.get(\"adb_path\", \"adb\")\r\ndevices = os.environ.get(\"devices\", \"\").split()\r\n\r\ndef stop_mining_on_device(device_id):\r\n    \"\"\"Stop ShaiPot mining on a single device\"\"\"\r\n    try:\r\n        print(f\"[{device_id}] Stopping ShaiPot mining...\")\r\n\r\n        print(f\"[{device_id}] Attempting to stop miner process using Termux...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell am start -n com.termux/com.termux.app.TermuxActivity\", shell=True)\r\n        time.sleep(2)\r\n\r\n        # Type 'pkill -f shaipot' to kill any running shaipot processes\r\n        pkill_cmd = \"pkill%s-f%sshaipot\"\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input text \\\"{pkill_cmd}\\\"\", shell=True)\r\n        time.sleep(1)\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input keyevent 66\", shell=True)\r\n        time.sleep(1)\r\n\r\n        print(f\"[{device_id}] Attempting to force-kill miner process directly...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell pkill -f shaipot\", shell=True)\r\n        time.sleep(1)\r\n\r\n        print(f\"[{device_id}] Force stopping Termux application as a last resort...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell am force-stop com.termux\", shell=True)\r\n\r\n        print(f\"[{device_id}] Turning device screen off...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell svc power stayon false\", shell=True)\r\n\r\n        print(f\"[{device_id}] ShaiPot mining stopped successfully!\")\r\n        return f\"[{device_id}] Mining stopped\"\r\n    except Exception as e:\r\n        print(f\"[{device_id}] Error stopping mining: {e}\")\r\n        return f\"[{device_id}] Error: {e}\"\r\n\r\nprint(\"=== Stopping ShaiPot Mining (Parallel) ===\")\r\n\r\nif not devices:\r\n    print(\"No devices specified in $devices environment variable\")\r\nelse:\r\n    # Process all devices in parallel\r\n    with ThreadPoolExecutor(max_workers=len(devices)) as executor:\r\n        future_to_device = {executor.submit(stop_mining_on_device, device_id): device_id for device_id in devices}\r\n\r\n        for future in as_completed(future_to_device):\r\n            device_id = future_to_device[future]\r\n            try:\r\n                result = future.result()\r\n                print(result)\r\n            except Exception as exc:\r\n                print(f\"[{device_id}] Generated an exception: {exc}\")\r\n\r\n    print(\"ShaiPot mining stopped on all devices.\")\r\n",
    "uninstallScript": "import os, time, subprocess\r\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\r\n\r\nADB = os.environ.get(\"adb_path\", \"adb\")\r\ndevices = os.environ.get(\"devices\", \"\").split()\r\n\r\ndef uninstall_miner_on_device(device_id):\r\n    \"\"\"Uninstall ShaiPot miner from a single device\"\"\"\r\n    try:\r\n        print(f\"[{device_id}] Starting ShaiPot miner uninstallation...\")\r\n\r\n        print(f\"[{device_id}] Force stopping Termux...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell am force-stop com.termux\", shell=True)\r\n        time.sleep(1)\r\n\r\n        print(f\"[{device_id}] Launching Termux...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell am start -n com.termux/com.termux.app.TermuxActivity\", shell=True)\r\n        time.sleep(3)\r\n\r\n        # Remove the mining directory - use %s to escape spaces for ADB input\r\n        remove_command = \"rm%s-rf%sshaipot-optimized\"\r\n        print(f\"[{device_id}] Removing mining directory...\")\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input text '{remove_command}'\", shell=True)\r\n        time.sleep(1)\r\n        subprocess.run(f\"{ADB} -s {device_id} shell input keyevent 66\", shell=True)\r\n        time.sleep(2)\r\n\r\n        print(f\"[{device_id}] ShaiPot miner uninstalled successfully!\")\r\n        return f\"[{device_id}] Miner uninstalled\"\r\n    except Exception as e:\r\n        print(f\"[{device_id}] Error uninstalling miner: {e}\")\r\n        return f\"[{device_id}] Error: {e}\"\r\n\r\nprint(\"=== Uninstalling ShaiPot Miner (Parallel) ===\")\r\n\r\nif not devices:\r\n    print(\"No devices specified in $devices environment variable\")\r\nelse:\r\n    # Process all devices in parallel\r\n    with ThreadPoolExecutor(max_workers=len(devices)) as executor:\r\n        future_to_device = {executor.submit(uninstall_miner_on_device, device_id): device_id for device_id in devices}\r\n\r\n        for future in as_completed(future_to_device):\r\n            device_id = future_to_device[future]\r\n            try:\r\n                result = future.result()\r\n                print(result)\r\n            except Exception as exc:\r\n                print(f\"[{device_id}] Generated an exception: {exc}\")\r\n\r\n    print(\"ShaiPot miner uninstallation completed on all devices.\")\r\n",
    "installTermux": false,
    "installScriptLanguage": "Python",
    "runScriptLanguage": "Python",
    "stopScriptLanguage": "Python",
    "uninstallScriptLanguage": "Python",
    "id": "d5bf92e4-e127-4426-b03a-47432f7e10e0"
  },
  "timestamp": "2025-10-05T04:13:51.752Z",
  "version": "1.0.0"
}