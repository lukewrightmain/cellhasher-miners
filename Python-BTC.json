{
  "minerType": {
    "name": "Bitcoin-test",
    "description": "Bitcoin (Must install Python Locally)",
    "installScript": "import os, time, subprocess, tempfile\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\ndevices = os.environ.get(\"devices\", \"\").split()\nwallet_address = os.environ.get(\"wallet_address\", \"\")\npool_url = os.environ.get(\"pool_url\", \"\")\nthreads = os.environ.get(\"threads\", \"8\")\n\n# ASCII only to avoid console encoding surprises; Termux is fine with UTF-8,\n# but Windows writing the file with cp1252 caused your error earlier.\ninstall_script_content = r'''#!/data/data/com.termux/files/usr/bin/bash\nset -e\nexport DEBIAN_FRONTEND=noninteractive\nexport TERMUX_PKG_NO_PROMPT=1\n\necho \"[*] Updating packages...\"\nyes '' | pkg upgrade -y || true\npkg update -y || true\npkg upgrade -y || true\n\necho \"[*] Installing required packages...\"\n# Correct Termux package names\nREQ_PKGS=\"clang make automake autoconf pkg-config libtool git curl openssl libjansson\"\nfor p in $REQ_PKGS; do\n  pkg install -y \"$p\" || true\ndone\n# Fallback if some mirrors name it \"jansson\"\nif ! pkg list-installed | grep -q 'libjansson'; then\n  pkg install -y jansson || true\nfi\n\necho \"[*] Creating mining directory...\"\nmkdir -p ~/bitcoin-mining\ncd ~/bitcoin-mining\n\necho \"[*] Cloning cpuminer-multi...\"\nif [ -d \"cpuminer-multi\" ]; then\n  echo \"[*] Repository exists, pulling latest...\"\n  cd cpuminer-multi && git pull || true\nelse\n  git clone --depth=1 https://github.com/CellHasher/cpuminer-multi\n  cd cpuminer-multi\nfi\n\necho \"[*] Preparing build...\"\nsed -i 's/-march=native//g' Makefile.am 2>/dev/null || true\nsed -i 's/-flto//g' Makefile.am 2>/dev/null || true\n./autogen.sh || autoreconf -fi\n./configure CFLAGS=\"-O3\" --with-crypto --with-curl\n\necho \"[*] Building miner...\"\nJOBS=$( (command -v nproc >/dev/null 2>&1 && nproc) || getconf _NPROCESSORS_ONLN || echo 1 )\nmake -j\"$JOBS\"\n\necho \"[OK] Installation Complete!\"\n'''\n\ndef install_on_device(device_id, script_path):\n    try:\n        print(f\"[{device_id}] Starting installation...\")\n\n        subprocess.run(f\"adb -s {device_id} shell am force-stop com.termux\", shell=True)\n        time.sleep(1)\n\n        device_temp_path = \"/data/local/tmp/btc_install.sh\"\n        print(f\"[{device_id}] Pushing install script...\")\n        subprocess.run(f'adb -s {device_id} push \"{script_path}\" \"{device_temp_path}\"', shell=True, check=True)\n\n        print(f\"[{device_id}] chmod +x â¦\")\n        subprocess.run(f\"adb -s {device_id} shell chmod 755 {device_temp_path}\", shell=True, check=True)\n\n        print(f\"[{device_id}] Launching Termuxâ¦\")\n        subprocess.run(f\"adb -s {device_id} shell am start -n com.termux/com.termux.app.TermuxActivity\", shell=True)\n        time.sleep(3)\n\n        # Use %s to send a space with \"adb shell input text\"\n        adb_typed_cmd = \"bash%s/data/local/tmp/btc_install.sh\"\n        subprocess.run(f\"adb -s {device_id} shell input text \\\"{adb_typed_cmd}\\\"\", shell=True)\n        time.sleep(1)\n        subprocess.run(f\"adb -s {device_id} shell input keyevent 66\", shell=True)\n\n        print(f\"[{device_id}] Install kicked off.\")\n        return f\"[{device_id}] Success\"\n    except Exception as e:\n        print(f\"[{device_id}] Error: {e}\")\n        return f\"[{device_id}] Error: {e}\"\n\n# --- Write the script as UTF-8 with LF endings to avoid cp1252/CRLF issues ---\nwith tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', newline='\\n', delete=False, suffix='.sh') as f:\n    f.write(install_script_content)\n    local_script_path = f.name\n\nprint(f\"Saved installation script to {local_script_path}\")\nprint(\"=== Starting Bitcoin Miner Installation (Parallel) ===\")\n\nmax_workers = max(1, len(devices))\nwith ThreadPoolExecutor(max_workers=max_workers) as executor:\n    future_to_device = {executor.submit(install_on_device, d, local_script_path): d for d in devices}\n    for future in as_completed(future_to_device):\n        print(future.result())\n\nos.unlink(local_script_path)\nprint(\"Install commands sent to all devices.\")",
    "runScript": "import os, time, subprocess\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\ndevices        = os.environ.get(\"devices\", \"\").split()\nwallet_address = os.environ.get(\"wallet_address\", \"\")\npool_url       = os.environ.get(\"pool_url\", \"\")\nthreads        = os.environ.get(\"threads\", \"8\")\n\n# How long to wait after opening Termux (seconds). Override via env TERMUX_WARMUP=7, etc.\nTERMUX_WARMUP = float(os.environ.get(\"TERMUX_WARMUP\", \"5\"))\n\ndef type_cmd(device_id, cmd, pause=0.3):\n    # adb 'input text' needs spaces as %s\n    escaped = cmd.replace(\" \", \"%s\")\n    subprocess.run(f'adb -s {device_id} shell input text \"{escaped}\"', shell=True)\n    time.sleep(pause)\n    subprocess.run(f\"adb -s {device_id} shell input keyevent 66\", shell=True)\n    time.sleep(pause)\n\ndef start_mining_on_device(device_id):\n    try:\n        print(f\"[{device_id}] Starting mining...\")\n        subprocess.run(f\"adb -s {device_id} shell am force-stop com.termux\", shell=True)\n        time.sleep(1)\n\n        subprocess.run(f\"adb -s {device_id} shell am start -n com.termux/com.termux.app.TermuxActivity\", shell=True)\n        time.sleep(TERMUX_WARMUP)  # â extra warm-up time for slow devices\n\n        # small poke so the prompt is definitely ready\n        type_cmd(device_id, \"clear\", pause=0.2)\n\n        # 1) cd into the build directory\n        type_cmd(device_id, \"cd ~/bitcoin-mining/cpuminer-multi\")\n\n        # 2) run cpuminer\n        miner_cmd = f'./cpuminer -a sha256d -o {pool_url} -u {wallet_address} -t {threads}'\n        type_cmd(device_id, miner_cmd)\n\n        # keep screen awake\n        subprocess.run(f\"adb -s {device_id} shell svc power stayon true\", shell=True)\n        print(f\"[{device_id}] Mining started.\")\n        return f\"[{device_id}] OK\"\n    except Exception as e:\n        print(f\"[{device_id}] Error: {e}\")\n        return f\"[{device_id}] Error: {e}\"\n\nprint(\"=== Starting Bitcoin Mining (Parallel) ===\")\nwith ThreadPoolExecutor(max_workers=max(1, len(devices))) as ex:\n    futs = {ex.submit(start_mining_on_device, d): d for d in devices}\n    for f in as_completed(futs):\n        print(f.result())",
    "stopScript": "\nimport os\nimport time\nimport subprocess\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\ndevices = os.environ.get(\"devices\", \"\").split()\n\ndef stop_mining_on_device(device_id):\n    \"\"\"Stop mining on a single device\"\"\"\n    try:\n        print(f\"[{device_id}] Stopping mining...\")\n        \n        print(f\"[{device_id}] Attempting to stop miner process using Termux...\")\n        subprocess.run(f\"adb -s {device_id} shell am start -n com.termux/com.termux.app.TermuxActivity\", shell=True)\n        time.sleep(2)\n        \n        # Escape text for ADB input command\n        pkill_command = \"pkill -f cpuminer\"\n        escaped_pkill_command = (\n            pkill_command.replace(\" \", \"%s\")\n                         .replace(\"/\", \"\\/\")\n        )\n        subprocess.run(f\"adb -s {device_id} shell input text '{escaped_pkill_command}'\", shell=True)\n        time.sleep(1)\n        subprocess.run(f\"adb -s {device_id} shell input keyevent 66\", shell=True)\n        time.sleep(1)\n        \n        print(f\"[{device_id}] Attempting to force-kill miner process directly...\")\n        subprocess.run(f\"adb -s {device_id} shell pkill -f cpuminer\", shell=True)\n        time.sleep(1)\n        \n        print(f\"[{device_id}] Force stopping Termux application as a last resort...\")\n        subprocess.run(f\"adb -s {device_id} shell am force-stop com.termux\", shell=True)\n        \n        print(f\"[{device_id}] Turning device screen off...\")\n        subprocess.run(f\"adb -s {device_id} shell svc power stayon false\", shell=True)\n        \n        print(f\"[{device_id}] Bitcoin mining stopped successfully!\")\n        return f\"[{device_id}] Mining stopped\"\n    except Exception as e:\n        print(f\"[{device_id}] Error stopping mining: {e}\")\n        return f\"[{device_id}] Error: {e}\"\n\nprint(\"=== Stopping Bitcoin Mining (Parallel) ===\")\n\n# Process all devices in parallel\nwith ThreadPoolExecutor(max_workers=len(devices)) as executor:\n    future_to_device = {executor.submit(stop_mining_on_device, device_id): device_id for device_id in devices}\n    \n    for future in as_completed(future_to_device):\n        device_id = future_to_device[future]\n        try:\n            result = future.result()\n            print(result)\n        except Exception as exc:\n            print(f\"[{device_id}] Generated an exception: {exc}\")\n\nprint(\"Mining stopped on all devices.\")",
    "installTermux": true,
    "installScriptLanguage": "Python",
    "runScriptLanguage": "Python",
    "stopScriptLanguage": "Python",
    "id": "bb4b21fc-28b8-4eb4-8476-8be52d2280df"
  },
  "timestamp": "2025-09-08T04:48:32.709Z",
  "version": "1.0.0"
}